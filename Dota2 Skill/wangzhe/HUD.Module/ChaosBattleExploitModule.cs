using Com.Game.Data;
using Com.Game.Manager;
using Com.Game.Module;
using GUIFramework;
using MobaHeros.Pvp;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;

namespace HUD.Module
{
	public class ChaosBattleExploitModule : BaseModule
	{
		private GameObject enemyCache;

		private GameObject allyCache0;

		private GameObject allyCache1;

		private GameObject allyCache2;

		private Transform goalWidget;

		private UILabel goalKillNum;

		private UILabel goalTime;

		private Transform team0Widget;

		private UILabel t0_kill;

		private UIGrid t0_grid;

		private Transform team1Widget;

		private UILabel t1_kill;

		private UIGrid t1_grid;

		private Transform team2Widget;

		private UILabel t2_kill;

		private UIGrid t2_grid;

		private Transform timerLabelWidget;

		private UILabel timerLabel_main;

		private Transform timerLabel_light;

		private Dictionary<Units, ChaosPlayerDeathCD> enemyCompsDict = new Dictionary<Units, ChaosPlayerDeathCD>();

		private CoroutineManager cMgr = new CoroutineManager();

		private Task mTimeTask;

		private VTrigger listener;

		private Vector3[] pos = new Vector3[]
		{
			new Vector3(120f, 0f, 0f),
			new Vector3(428f, 0f, 0f),
			new Vector3(736f, 0f, 0f)
		};

		private int battleTime = 510;

		private bool isReplayMode;

		private bool dataReady;

		public ChaosBattleExploitModule()
		{
			this.module = EHUDModule.ChaosBattleExploit;
			this.WinResCfg = new WinResurceCfg(false, false, "Prefab/HUDModule/ChaosBattleExploit");
		}

		public override void Init()
		{
			this.enemyCache = this.transform.FindChild("EnemyCache").gameObject;
			this.allyCache0 = this.transform.FindChild("AllyCache_0").gameObject;
			this.allyCache1 = this.transform.FindChild("AllyCache_1").gameObject;
			this.allyCache2 = this.transform.FindChild("AllyCache_2").gameObject;
			this.goalWidget = this.transform.FindChild("Anchor/Goal");
			this.goalKillNum = this.goalWidget.FindChild("Label").GetComponent<UILabel>();
			this.goalTime = this.goalWidget.FindChild("Time").GetComponent<UILabel>();
			this.team0Widget = this.transform.FindChild("Anchor/Team0");
			this.t0_kill = this.team0Widget.FindChild("Label").GetComponent<UILabel>();
			this.t0_grid = this.team0Widget.FindChild("Grid").GetComponent<UIGrid>();
			this.team1Widget = this.transform.FindChild("Anchor/Team1");
			this.t1_kill = this.team1Widget.FindChild("Label").GetComponent<UILabel>();
			this.t1_grid = this.team1Widget.FindChild("Grid").GetComponent<UIGrid>();
			this.team2Widget = this.transform.FindChild("Anchor/Team2");
			this.t2_kill = this.team2Widget.FindChild("Label").GetComponent<UILabel>();
			this.t2_grid = this.team2Widget.FindChild("Grid").GetComponent<UIGrid>();
			this.timerLabelWidget = this.transform.FindChild("TimerContainer");
			this.timerLabel_light = this.timerLabelWidget.FindChild("Sprite");
			this.timerLabel_main = this.timerLabelWidget.FindChild("main").GetComponent<UILabel>();
		}

		public override void HandleAfterOpenModule()
		{
			this.isReplayMode = GameManager.Instance.ReplayController.IsReplayStart;
			SysBattleSceneVo dataById = BaseDataMgr.instance.GetDataById<SysBattleSceneVo>("80007");
			if (dataById != null)
			{
				this.battleTime = (int)dataById.hero2_nb_time;
			}
			if (this.cMgr == null)
			{
				this.cMgr = new CoroutineManager();
			}
			this.dataReady = false;
			MobaMessageManager.RegistMessage((ClientMsg)25038, new MobaMessageFunc(this.DoWhenSpawnFinished));
			this.cMgr.StartCoroutine(this.DoInitComps(), true);
			this.mTimeTask = this.cMgr.StartCoroutine(this.RecordTime(), true);
			this.listener = TriggerManager.CreateGameEventTrigger(GameEvent.UpdateView, null, new TriggerAction(this.UpdateView));
		}

		public override void HandleBeforeCloseModule()
		{
			this.listener = null;
			this.mTimeTask = null;
			this.cMgr.StopAllCoroutine();
			MobaMessageManager.UnRegistMessage((ClientMsg)25038, new MobaMessageFunc(this.DoWhenSpawnFinished));
			MobaMessageManager.UnRegistMessage((ClientMsg)25035, new MobaMessageFunc(this.DoUnitDead));
		}

		private void DoWhenSpawnFinished(MobaMessage msg)
		{
			this.dataReady = true;
		}

		[DebuggerHidden]
		private IEnumerator RecordTime()
		{
			ChaosBattleExploitModule.<RecordTime>c__IteratorD4 <RecordTime>c__IteratorD = new ChaosBattleExploitModule.<RecordTime>c__IteratorD4();
			<RecordTime>c__IteratorD.<>f__this = this;
			return <RecordTime>c__IteratorD;
		}

		private void TimerShow(int _sec)
		{
			if (_sec == 180)
			{
				this.timerLabel_main.text = "3 min";
				AudioMgr.Play("Play_Businessman_CD3m", null, false, false);
			}
			else if (_sec == 60)
			{
				this.timerLabel_main.text = _sec + " sec";
				AudioMgr.Play("Play_Businessman_CD1m", null, false, false);
			}
			else if (_sec == 30)
			{
				this.timerLabel_main.text = _sec + " sec";
				AudioMgr.Play("Play_Businessman_CD30s", null, false, false);
			}
			else if (_sec <= 10 && _sec > 0)
			{
				this.timerLabel_main.text = _sec + " sec";
				if (_sec == 10)
				{
					this.timerLabel_light.GetComponent<TweenPosition>().duration = 1f;
					this.timerLabel_light.GetComponent<TweenAlpha>().duration = 1f;
					AudioMgr.Play("Play_Businessman_CD10s", null, false, false);
				}
			}
			else
			{
				if (_sec != 0)
				{
					return;
				}
				this.timerLabel_main.text = "timeup";
				this.cMgr.StopAllCoroutine();
			}
			AudioMgr.PlayUI("Play_Countdown", null, false, false);
			this.timerLabelWidget.GetComponent<TweenAlpha>().ResetToBeginning();
			this.timerLabelWidget.GetComponent<TweenAlpha>().PlayForward();
			this.timerLabelWidget.GetComponent<TweenScale>().ResetToBeginning();
			this.timerLabelWidget.GetComponent<TweenScale>().PlayForward();
			this.timerLabel_light.GetComponent<TweenPosition>().ResetToBeginning();
			this.timerLabel_light.GetComponent<TweenPosition>().PlayForward();
			this.timerLabel_light.GetComponent<TweenAlpha>().ResetToBeginning();
			this.timerLabel_light.GetComponent<TweenAlpha>().PlayForward();
		}

		[DebuggerHidden]
		private IEnumerator DoInitComps()
		{
			ChaosBattleExploitModule.<DoInitComps>c__IteratorD5 <DoInitComps>c__IteratorD = new ChaosBattleExploitModule.<DoInitComps>c__IteratorD5();
			<DoInitComps>c__IteratorD.<>f__this = this;
			return <DoInitComps>c__IteratorD;
		}

		private void DoUnitDead(MobaMessage msg)
		{
			ParamUnitDeathTime paramUnitDeathTime = msg.Param as ParamUnitDeathTime;
			int uniqueId = paramUnitDeathTime.uniqueId;
			float reliveTime = paramUnitDeathTime.reliveTime;
			Units unit = MapManager.Instance.GetUnit(uniqueId);
			if (unit.isEnemy && this.enemyCompsDict.ContainsKey(unit))
			{
				this.enemyCompsDict[unit].ShowCd(reliveTime);
			}
		}

		private void UpdateView()
		{
			if (GameManager.IsGameOver())
			{
				return;
			}
			Units player = PlayerControlMgr.Instance.GetPlayer();
			if (player == null)
			{
				return;
			}
			if (LevelManager.Instance.IsPvpBattleType)
			{
				PvpStatisticMgr.GroupData groupData = Singleton<PvpManager>.Instance.StatisticMgr.GetGroupData(0);
				PvpStatisticMgr.GroupData groupData2 = Singleton<PvpManager>.Instance.StatisticMgr.GetGroupData(1);
				PvpStatisticMgr.GroupData groupData3 = Singleton<PvpManager>.Instance.StatisticMgr.GetGroupData(3);
				this.t0_kill.text = groupData.TeamKill.ToString();
				this.t1_kill.text = groupData2.TeamKill.ToString();
				this.t2_kill.text = groupData3.TeamKill.ToString();
				this.PlayTween(groupData.TeamKill, groupData2.TeamKill, groupData3.TeamKill);
			}
		}

		private void PlayTween(int lmKill, int blKill, int t3Kill)
		{
			if (lmKill >= blKill && blKill >= t3Kill)
			{
				TweenPosition.Begin(this.team0Widget.gameObject, 0.5f, this.pos[0]);
				TweenPosition.Begin(this.team1Widget.gameObject, 0.5f, this.pos[1]);
				TweenPosition.Begin(this.team2Widget.gameObject, 0.5f, this.pos[2]);
			}
			else if (lmKill >= blKill && blKill < t3Kill && lmKill >= t3Kill)
			{
				TweenPosition.Begin(this.team0Widget.gameObject, 0.5f, this.pos[0]);
				TweenPosition.Begin(this.team1Widget.gameObject, 0.5f, this.pos[2]);
				TweenPosition.Begin(this.team2Widget.gameObject, 0.5f, this.pos[1]);
			}
			else if (lmKill >= blKill && blKill < t3Kill && lmKill < t3Kill)
			{
				TweenPosition.Begin(this.team0Widget.gameObject, 0.5f, this.pos[1]);
				TweenPosition.Begin(this.team1Widget.gameObject, 0.5f, this.pos[2]);
				TweenPosition.Begin(this.team2Widget.gameObject, 0.5f, this.pos[0]);
			}
			else if (lmKill < blKill && blKill >= t3Kill && lmKill >= t3Kill)
			{
				TweenPosition.Begin(this.team0Widget.gameObject, 0.5f, this.pos[1]);
				TweenPosition.Begin(this.team1Widget.gameObject, 0.5f, this.pos[0]);
				TweenPosition.Begin(this.team2Widget.gameObject, 0.5f, this.pos[2]);
			}
			else if (lmKill < blKill && blKill >= t3Kill && lmKill < t3Kill)
			{
				TweenPosition.Begin(this.team0Widget.gameObject, 0.5f, this.pos[2]);
				TweenPosition.Begin(this.team1Widget.gameObject, 0.5f, this.pos[0]);
				TweenPosition.Begin(this.team2Widget.gameObject, 0.5f, this.pos[1]);
			}
			else if (lmKill < blKill && blKill < t3Kill)
			{
				TweenPosition.Begin(this.team0Widget.gameObject, 0.5f, this.pos[2]);
				TweenPosition.Begin(this.team1Widget.gameObject, 0.5f, this.pos[1]);
				TweenPosition.Begin(this.team2Widget.gameObject, 0.5f, this.pos[0]);
			}
		}
	}
}
