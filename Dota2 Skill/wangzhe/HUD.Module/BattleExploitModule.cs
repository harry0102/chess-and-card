using Assets.Scripts.Model;
using Com.Game.Data;
using Com.Game.Manager;
using Com.Game.Module;
using GUIFramework;
using MobaHeros.Pvp;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;

namespace HUD.Module
{
	public class BattleExploitModule : BaseModule
	{
		private TweenPosition mTweenPos;

		private UILabel mTime;

		private UILabel mTeam1;

		private UILabel mTeam2;

		private UILabel mKill;

		private UILabel mDeath;

		private UILabel mAssists;

		private UILabel mBoss;

		private VTrigger listener;

		private SourceData _data = new SourceData();

		private CoroutineManager cMgr = new CoroutineManager();

		private Task mTimeTask;

		private Dictionary<int, string> msgList = new Dictionary<int, string>();

		private bool isReplayMode;

		public BattleExploitModule()
		{
			this.module = EHUDModule.BattleExploit;
			this.WinResCfg = new WinResurceCfg(false, false, "Prefab/HUDModule/BattleExploit");
		}

		public override void Init()
		{
			base.Init();
			Transform transform = this.transform.FindChild("ParentNode");
			this.mTweenPos = transform.GetComponent<TweenPosition>();
			this.mTime = transform.FindChild("Time/TimeLabel").GetComponent<UILabel>();
			this.mTeam1 = transform.FindChild("TeamScore/Team1").GetComponent<UILabel>();
			this.mTeam2 = transform.FindChild("TeamScore/Team2").GetComponent<UILabel>();
			this.mKill = transform.FindChild("Kill/KillNumLabel").GetComponent<UILabel>();
			this.mDeath = transform.FindChild("Death/DeathNumLabel").GetComponent<UILabel>();
			this.mAssists = transform.FindChild("Assists/AssistsNumLabel").GetComponent<UILabel>();
			this.mBoss = transform.FindChild("Boss/BossNumLabel").GetComponent<UILabel>();
			string level_id = LevelManager.m_CurLevel.level_id;
			SysBattleSceneVo dataById = BaseDataMgr.instance.GetDataById<SysBattleSceneVo>(level_id);
			if (dataById != null)
			{
				if (dataById.scene_map_id.Equals("Map21"))
				{
					transform.FindChild("TeamScore").gameObject.SetActive(false);
					transform.FindChild("Kill").gameObject.SetActive(false);
					transform.FindChild("Death").gameObject.SetActive(false);
					transform.FindChild("Assists").gameObject.SetActive(false);
					transform.FindChild("Boss").gameObject.SetActive(false);
				}
				else
				{
					this.listener = TriggerManager.CreateGameEventTrigger(GameEvent.UpdateView, null, new TriggerAction(this.UpdateGoldView));
				}
			}
		}

		public override void HandleAfterOpenModule()
		{
			this.isReplayMode = GameManager.Instance.ReplayController.IsReplayStart;
			this.mTimeTask = this.cMgr.StartCoroutine(this.RecordTime(), true);
			this.ResetTimeMsg();
		}

		public override void HandleBeforeCloseModule()
		{
			ModelManager.Instance.Set_Settle_Time(this.mTime.text);
			this.mTimeTask = null;
			this._data.Clear();
			this.cMgr.StopAllCoroutine();
		}

		public override void onFlyOut()
		{
			this.mTweenPos.PlayForward();
		}

		public override void onFlyIn()
		{
			this.mTweenPos.PlayReverse();
		}

		[DebuggerHidden]
		private IEnumerator RecordTime()
		{
			BattleExploitModule.<RecordTime>c__IteratorD2 <RecordTime>c__IteratorD = new BattleExploitModule.<RecordTime>c__IteratorD2();
			<RecordTime>c__IteratorD.<>f__this = this;
			return <RecordTime>c__IteratorD;
		}

		private void ResetTimeMsg()
		{
			this.msgList.Clear();
			SysBattleSceneVo dataById = BaseDataMgr.instance.GetDataById<SysBattleSceneVo>(Singleton<PvpManager>.Instance.BattleId.ToString());
			if (dataById == null)
			{
				return;
			}
			int num = Convert.ToInt32(dataById.monster_spawn_time);
			string curBattleId = LevelManager.CurBattleId;
			switch (curBattleId)
			{
			case "80001":
			case "80008":
			case "80009":
			case "80010":
			case "80005":
				this.msgList.Add(num - 10, "1004");
				this.msgList.Add(num, "1007");
				break;
			case "80003":
			case "80006":
			case "80011":
			case "80012":
			case "80013":
				this.msgList.Add(5, "1001");
				this.msgList.Add(num - 10, "1005");
				this.msgList.Add(num, "1008");
				break;
			case "800055":
			case "80014":
			case "80015":
			case "80016":
				this.msgList.Add(15, "1002");
				this.msgList.Add(num - 30, "1006");
				this.msgList.Add(num, "1009");
				break;
			case "80007":
				this.msgList.Add(5, "1003");
				break;
			}
		}

		private void UpdateGoldView()
		{
			if (this.transform == null)
			{
				return;
			}
			this.UpdateSourceData();
			this.mKill.text = this._data.heroKill.ToString();
			this.mDeath.text = this._data.death.ToString();
			this.mBoss.text = this._data.monsterKill.ToString();
			this.mAssists.text = this._data.assist.ToString();
			this.UpdateTeamData();
		}

		private void UpdateSourceData()
		{
			Units player = PlayerControlMgr.Instance.GetPlayer();
			if (player == null)
			{
				return;
			}
			if (LevelManager.Instance.IsPvpBattleType)
			{
				int unique_id = player.unique_id;
				PvpStatisticMgr.HeroData heroData = Singleton<PvpManager>.Instance.StatisticMgr.GetHeroData(unique_id);
				this._data.heroKill = heroData.HeroKill;
				this._data.monsterKill = heroData.MonsterKill;
				this._data.assist = heroData.Assist;
				this._data.death = heroData.Death;
				this._data.firstKill = heroData.FirstKill;
			}
			else
			{
				AchieveData achieveData = GameManager.Instance.AchieveManager.GetAchieveData(player.unique_id, player.teamType);
				if (achieveData != null)
				{
					this._data.heroKill = achieveData.TotalKill;
					this._data.monsterKill = achieveData.MonsterKillNum;
					this._data.assist = player.assistantNum;
					this._data.death = achieveData.SelfDeathTime;
				}
			}
		}

		private void ChangeTeamDataFontIfNeed()
		{
			Units player = PlayerControlMgr.Instance.GetPlayer();
			if (player == null || player.TeamType == TeamType.LM)
			{
				return;
			}
			this.mTeam2.pivot = UIWidget.Pivot.Right;
			this.mTeam2.transform.localPosition = new Vector3(-20f, -5f, 0f);
			this.mTeam1.pivot = UIWidget.Pivot.Left;
			this.mTeam1.transform.localPosition = new Vector3(20f, -5f, 0f);
		}

		private void UpdateTeamData()
		{
			if (GameManager.IsGameOver())
			{
				return;
			}
			Units player = PlayerControlMgr.Instance.GetPlayer();
			if (player == null)
			{
				return;
			}
			bool flag = player.TeamType == TeamType.BL;
			if (LevelManager.Instance.IsPvpBattleType)
			{
				PvpStatisticMgr.GroupData groupData = Singleton<PvpManager>.Instance.StatisticMgr.GetGroupData(0);
				PvpStatisticMgr.GroupData groupData2 = Singleton<PvpManager>.Instance.StatisticMgr.GetGroupData(1);
				this.mTeam1.text = ((!flag) ? groupData.TeamKill.ToString() : groupData2.TeamKill.ToString());
				this.mTeam2.text = ((!flag) ? groupData2.TeamKill.ToString() : groupData.TeamKill.ToString());
			}
		}
	}
}
